package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"buygo/graph/model"
	"context"
	"fmt"
	"time"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/xjem/t38c"

	"github.com/prometheus/client_golang/prometheus"
)

var (
	dealsCreated = prometheus.NewCounter(prometheus.CounterOpts{
		Name: "buygo_deals_created_total",
		Help: "Total number of deals created",
	})

	tile38Errors = prometheus.NewCounter(prometheus.CounterOpts{
		Name: "buygo_tile38_errors_total",
		Help: "Tile38 insert/search failures",
	})

	viewportSubs = prometheus.NewGauge(prometheus.GaugeOpts{
		Name: "buygo_active_viewport_subscriptions",
		Help: "Number of active viewport subscriptions",
	})

	tile38Duration = prometheus.NewHistogram(prometheus.HistogramOpts{
		Name: "buygo_tile38_latency_seconds",
		Help: "Latency of Tile38 operations",
		Buckets: prometheus.DefBuckets,
	})
)

func init() {
	prometheus.MustRegister(dealsCreated, tile38Errors, viewportSubs, tile38Duration)
}

// CreateDeal is the resolver for the createDeal field.
func (r *mutationResolver) CreateDeal(ctx context.Context, input model.DealInput) (*model.Deal, error) {
	now := time.Now()

	deal := &model.Deal{
		ID:                 uuid.NewString(),
		Title:              input.Title,
		Description:        input.Description,
		VendorID:           input.VendorID,
		Price:              input.Price,
		OriginalPrice:      input.OriginalPrice,
		DiscountPercentage: calculateDiscount(input.Price, input.OriginalPrice),
		Location: &model.GeoPoint{
			Latitude:  input.Location.Latitude,
			Longitude: input.Location.Longitude,
		},
		CreatedAt: now,
		ExpiresAt: input.ExpiresAt,
	}

	// Serialize to JSON
	dealBytes, err := json.Marshal(deal)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal deal to JSON: %w", err)
	}


	var ttl time.Duration
	if deal.ExpiresAt != nil {
		ttl = time.Until(*deal.ExpiresAt)
		if ttl <= 0 {
			ttl = time.Hour // fallback TTL
		}
	} else {
		ttl = time.Hour
	}


	// Store in Redis
	redisErr := r.Redis.Set(ctx, "deal:"+deal.ID, dealBytes, ttl).Err()
	if redisErr != nil {
		fmt.Errorf("warning: failed to write deal to Redis: %v", err)
		// continue anyway
	}

	dealsCreated.Inc()

	tileErr := r.Tile.Keys.Set("deals", deal.ID).
	Point(deal.Location.Latitude, deal.Location.Longitude).
	Field("created_at", float64(deal.CreatedAt.Unix())).
	Do(ctx)

	if tileErr != nil {
		tile38Errors.Inc()
		return nil, fmt.Errorf("tile38 insert failed: %w", err)
	}

	return deal, nil
}

func calculateDiscount(price float64, original *float64) *float64 {
	if original == nil || *original == 0 {
		return nil
	}
	discount := (1 - (price / *original)) * 100
	return &discount
}

// DealsInViewport is the resolver for the dealsInViewport field.
func (r *queryResolver) DealsInViewport(ctx context.Context, bb model.BoundingBox) ([]*model.Deal, error) {
	start := time.Now()
	resp, err := r.Tile.Search.Within("deals").
		Bounds(bb.MinLatitude, bb.MinLongitude, bb.MaxLatitude, bb.MaxLongitude).
		Do(ctx)
		
		tile38Duration.Observe(time.Since(start).Seconds())
	if err != nil {
		tile38Errors.Inc()
		return nil, fmt.Errorf("tile38 within query failed: %w", err)
	}

	idSet := make(map[string]struct{}, len(resp.Objects))
	for _, obj := range resp.Objects {
		idSet[obj.ID] = struct{}{}
	}

	var matches []*model.Deal
	for id := range idSet {
		val, err := r.Redis.Get(ctx, "deal:"+id).Bytes()
		if err != nil {
			fmt.Printf("failed to get deal %s from Redis: %v\n", id, err)
			continue
		}
		var deal model.Deal
		if err := json.Unmarshal(val, &deal); err != nil {
			fmt.Printf("failed to decode deal %s: %v\n", id, err)
			continue
		}
		matches = append(matches, &deal)
	}
	return matches, nil
}

// DealCreatedInViewport is the resolver for the dealCreatedInViewport field.
func (r *subscriptionResolver) DealCreatedInViewport(ctx context.Context, bb model.BoundingBox) (<-chan *model.Deal, error) {
	feed := make(chan *model.Deal, 1)

	geoCtx, cancel := context.WithCancel(context.Background())

	viewportSubs.Inc()
	//NOTE:(donke) Can we go even FASTAR if we use raw RESP?
	go func() {
		err := r.Tile.Geofence.Within("deals").
		Bounds(bb.MinLatitude, bb.MinLongitude, bb.MaxLatitude, bb.MaxLongitude).
		Actions(t38c.Enter).
		Do(geoCtx, t38c.EventHandlerFunc(func(event *t38c.GeofenceEvent) error {
			if event.Object == nil {
				return nil
			}

			// Lookup full metadata in Redis using ID
			val, err := r.Redis.Get(ctx, "deal:"+event.ID).Bytes()
			if err != nil {
				fmt.Printf("failed to get deal %s from Redis: %v\n", event.ID, err)
				return nil
			}

			var deal model.Deal
			if err := json.Unmarshal(val, &deal); err != nil {
				fmt.Printf("failed to decode deal %s: %v\n", event.ID, err)
				return nil
			}

			select {
			case feed <- &deal:
			default:
			}
			return nil
		}))

		if err != nil {
			fmt.Printf("geofence error: %v\n", err)
		}
	}()

	// YEEEEEEEEEEEEEET
	go func() {
		<-ctx.Done()
		viewportSubs.Dec()
		cancel()
		close(feed)
	}()

	return feed, nil
}


// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
