package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"buygo/graph/model"
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
)

// CreateDeal is the resolver for the createDeal field.
func (r *mutationResolver) CreateDeal(ctx context.Context, input model.DealInput) (*model.Deal, error) {
	now := time.Now()

	deal := &model.Deal{
		ID:                 uuid.NewString(),
		Title:              input.Title,
		Description:        input.Description,
		VendorID:           input.VendorID,
		Price:              input.Price,
		OriginalPrice:      input.OriginalPrice,
		DiscountPercentage: calculateDiscount(input.Price, input.OriginalPrice),
		Location: &model.GeoPoint{
			Latitude:  input.Location.Latitude,
			Longitude: input.Location.Longitude,
		},
		CreatedAt: now,
		ExpiresAt: input.ExpiresAt,
	}

	r.mu.Lock()
	r.Deals = append(r.Deals, deal)
	r.mu.Unlock()

	err := r.Tile.Keys.Set("deals", deal.ID).
	Point(deal.Location.Latitude, deal.Location.Longitude).
	Field("created_at", float64(deal.CreatedAt.Unix())).
	Do(ctx)

	if err != nil {
		return nil, fmt.Errorf("tile38 insert failed: %w", err)
	}

	r.subsMu.RLock()
	for _, sub := range r.Subs {
		if inBoundingBox(deal.Location, sub.bb) {
			select {
			case sub.feed <- deal:
			default:
				// skip if channel is full
			}
		}
	}
	r.subsMu.RUnlock()

	return deal, nil
}

func calculateDiscount(price float64, original *float64) *float64 {
	if original == nil || *original == 0 {
		return nil
	}
	discount := (1 - (price / *original)) * 100
	return &discount
}

func inBoundingBox(p *model.GeoPoint, bb model.BoundingBox) bool {
	return p.Latitude >= bb.MinLatitude &&
		p.Latitude <= bb.MaxLatitude &&
		p.Longitude >= bb.MinLongitude &&
		p.Longitude <= bb.MaxLongitude
}

// DealsInViewport is the resolver for the dealsInViewport field.
func (r *queryResolver) DealsInViewport(ctx context.Context, bb model.BoundingBox) ([]*model.Deal, error) {
	resp, err := r.Tile.Search.Within("deals").
		Bounds(bb.MinLatitude, bb.MinLongitude, bb.MaxLatitude, bb.MaxLongitude).
		Do(ctx)
	if err != nil {
		return nil, fmt.Errorf("tile38 within query failed: %w", err)
	}

	idSet := make(map[string]struct{}, len(resp.Objects))
	for _, obj := range resp.Objects {
		idSet[obj.ID] = struct{}{}
	}

	r.mu.RLock()
	defer r.mu.RUnlock()

	var matches []*model.Deal
	for _, d := range r.Deals {
		if _, found := idSet[d.ID]; found {
			matches = append(matches, d)
		}
	}
	return matches, nil
}

// DealCreatedInViewport is the resolver for the dealCreatedInViewport field.
func (r *subscriptionResolver) DealCreatedInViewport(ctx context.Context, bb model.BoundingBox) (<-chan *model.Deal, error) {
	id := uuid.NewString()
	feed := make(chan *model.Deal, 1)

	r.subsMu.Lock()
	r.Subs[id] = Subscription{
		bb:   bb,
		feed: feed,
	}
	r.subsMu.Unlock()

	// Clean up when the client disconnects
	go func() {
		<-ctx.Done()
		r.subsMu.Lock()
		delete(r.Subs, id)
		r.subsMu.Unlock()
	}()

	return feed, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
